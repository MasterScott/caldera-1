syntax = "proto3";

package events;

import "request/request.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "{{[ .Project ]}}/contracts/events";

// Interface exported by the server.
service Events {
  // Get Event object by ID
  rpc GetEvent (request.ByID) returns (Event) {
    option (google.api.http).get = "/{{[ .API.Version ]}}/events/id/{id}";
  }

  // Find Events objects by name.
  rpc FindEventsByName (request.ByName) returns (stream Event) {
    option (google.api.http).get = "/{{[ .API.Version ]}}/events/name/{name}";
  }

  // List all Events.
  rpc ListEvents (google.protobuf.Empty) returns (stream Event) {
    option (google.api.http).get = "/{{[ .API.Version ]}}/events";
  }

  // Create a new Event object.
  rpc CreateEvent (Event) returns (Event) {
    option (google.api.http) = {
      post: "/{{[ .API.Version ]}}/events",
      body: "*"
    };
  }

  // Update a Events object.
  rpc UpdateEvent (Event) returns (Event) {
    option (google.api.http) = {
      put: "/{{[ .API.Version ]}}/events/id/{id}",
      body: "*"
    };
  }

  // Delete Event object by ID.
  rpc DeleteEvent (request.ByID) returns (google.protobuf.Empty) {
    option (google.api.http).delete = "/{{[ .API.Version ]}}/events/id/{id}";
  }

  // Delete Events objects by Event name.
  rpc DeleteEventsByName (request.ByName) returns (google.protobuf.Empty) {
    option (google.api.http).delete = "/{{[ .API.Version ]}}/events/name/{name}";
  }
}

// An Events example.
message Event {
  // The ID of the Events.
  string id = 1;

  // The name of the Events.
  string name = 2;
}
  