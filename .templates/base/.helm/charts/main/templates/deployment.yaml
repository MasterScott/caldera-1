{{- $serviceName := .Values.service.name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "name" . }}
  labels:
    app: {{ template "fullname" . }}
    app.kubernetes.io/name: {{ .Values.service.name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "chart" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  minReadySeconds: {{ .Values.minReadySeconds }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.maxUnavailable }}
      maxSurge: {{ .Values.maxSurge }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
    spec:
      {{- if .Values.service.antiAffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "{{ template "fullname" . }}"
            topologyKey: kubernetes.io/hostname
      {{- end }}
      {{- if .Values.image.pullSecretName }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecretName }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.gracePeriod }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        {{[- if .API.Enabled ]}}
        - containerPort: {{ .Values.service.grpc.port }}
          name: grpc
        {{[- if .API.Gateway ]}}
        - containerPort: {{ .Values.service.gateway.port }}
          name: gateway
        {{[- end ]}}
        {{[- end ]}}
        - containerPort: {{ .Values.service.info.port }}
          name: info
        env:
        - name: {{ printf "%s_CONFIG_PATH" .Values.service.name | upper | replace "-" "_" }}
          value: /etc/{{ .Values.service.name | replace "-" "_" }}/default.conf
        {{[- if .Storage.Enabled ]}}
        {{- if .Values.service.database.enabled}}
        {{- if .Values.service.database.host }}
        - name: {{ printf "%s_DB_HOST" $serviceName | upper | replace "-" "_" }}
          valueFrom:
            configMapKeyRef:
              key: host
              name: {{ .Values.service.database.host }}
        {{- end }}
        {{- if .Values.service.database.port }}
        - name: {{ printf "%s_DB_PORT" $serviceName | upper | replace "-" "_" }}
          valueFrom:
            configMapKeyRef:
              key: port
              name: {{ .Values.service.database.port }}
        {{- end }}
        {{- if .Values.service.database.name }}
        - name: {{ printf "%s_DB_DRIVER" .Values.service.name | upper | replace "-" "_" }}
          value: {{ .Values.service.database.driver }}
        - name: {{ printf "%s_DB_NAME" $serviceName | upper | replace "-" "_" }}
          valueFrom:
            secretKeyRef:
              key: database
              name: {{ .Values.service.database.name }}
        {{- end }}
        {{- if .Values.service.database.username }}
        - name: {{ printf "%s_DB_USERNAME" $serviceName | upper | replace "-" "_" }}
          valueFrom:
            secretKeyRef:
              key: username
              name: {{ .Values.service.database.username }}
        {{- end }}
        {{- if .Values.service.database.password }}
        - name: {{ printf "%s_DB_PASSWORD" $serviceName | upper | replace "-" "_" }}
          valueFrom:
            secretKeyRef:
              key: password
              name: {{ .Values.service.database.password }}
        {{- end }}
        {{- end }}
        {{[- end ]}}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.service.info.port }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /readyz
            port: {{ .Values.service.info.port }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        volumeMounts:
        - name: {{ template "name" . }}-config
          mountPath: /etc/{{ .Values.service.name | replace "-" "_" }}/
        {{[- if .Storage.Enabled ]}}
        {{- if and .Values.service.database.enabled .Values.service.database.tls.enabled  }}
        - name: {{ .Values.service.database.tls.secret }}
          mountPath: {{ .Values.service.database.tls.mountPath }}
          readOnly: true
        {{- end }}
        {{[- end ]}}
        resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
        - name: {{ template "name" . }}-config
          configMap:
            name: {{ template "name" . }}-config
        {{[- if .Storage.Enabled ]}}
        {{- if and .Values.service.database.enabled .Values.service.database.tls.enabled }}
        - name: {{ .Values.service.database.tls.secret }}
          secret:
            secretName: {{ .Values.service.database.tls.secret }}
            defaultMode: 0400
        {{- end }}
        {{[- end ]}}
