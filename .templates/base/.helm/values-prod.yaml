## Default values for {{[ .Name ]}}.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Count of instances
##
replicaCount: 3

## Count of revisions saved in release history
##
revisionHistoryLimit: 5

## Time of accepting requests to the service ( seconds )
##
minReadySeconds: 10

## Value which provide max unavailable state ( percents )
##
maxUnavailable: 25%

## Max count of surge replicas
##
maxSurge: 1

## Termination grace period
## It's value of period in seconds between SIGTERM and SIGKILL signals
##
gracePeriod: 30

image:
  ## Docker Registry/Hub image name and tag
  ##
  {{[- if .GKE.Enabled ]}}
  registry: gcr.io/{{[ .GKE.Project ]}}
  {{[- else ]}}
  registry: {{[ .Github ]}}
  {{[- end ]}}
  name: {{[ .Name ]}}
  tag: v0.0.0

  ## Docker Registry/Hub auth secret name, always use `registry-pull-secret` if registry inside if k8s
  ##
  # pullSecretName: registry-pull-secret

  ## Docker Registry/Hub image pull policy
  ##
  pullPolicy: Always

## Ingress
## Optional: Contour - Ingress controller with Envoy
## to proxy all services using shared IP address.
##
ingress:
  ## If true, Ingress will be created
  ##
  enabled: true

  ## Use Contour ingress routes
  ##
  contour:
    enabled: false
    annotations:
      kubernetes.io/ingress.allow-http: false
      projectcontour.io/ingress.class: contour
      projectcontour.io/tls-minimum-protocol-version: TLSv1_2

  ## TLS configs
  ##
  tls:
    ##
    enabled: true
    ##
    secretName: {{[ .Name ]}}.prod.net-cert

  ## Annotations
  ##
  annotations:
    ## Uses reserved external IP name
    ## kubernetes.io/ingress.global-static-ip-name: grpc-lb

  ## Ingress route hosts
  ##
  hosts:
    ## gRPC service host
    - name: grpc
      host: {{[ .Name ]}}-grpc.prod.net
      path: /
      port: {{[ .API.Config.Port ]}}

    ## REST service host
    - name: rest
      host: {{[ .Name ]}}-rest.prod.net
      path: /
      port: {{[ .API.Config.Gateway.Port ]}}

service:
  ## App container name
  ##
  name: {{[ .Name ]}}

  ## Anti Affinity Pods requirements
  ##
  antiAffinity: true

  ## Service Type
  ## For minikube, recommended value NodePort,
  ## For GKE - LoadBalancer in case of TCP or NodePort in case of HTTP
  ## elsewhere - ClusterIP
  ##
  type: ClusterIP

  ## Headless service
  ##
  ## if true it could not use Cluster IP
  headless: true

  ## Service annotations (e.g. Prometheus annotations)
  ##
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/probe: "true"
    prometheus.io/probe-path: "/v1/health"
    prometheus.io/probe-scheme: "http"
    ## Allows to use HTTP/2 for named port
    ## cloud.google.com/app-protocols: '{"grpc":"HTTP2"}'
    ## Enables container-native load balancing
    ## cloud.google.com/neg: '{"ingress": true}'
    ## projectcontour.io/upstream-protocol.h2c: "{{[ .API.Config.Port ]}},grpc"

  {{[- if .API.Enabled ]}}

  ## gRPC protocol attributes
  ##
  grpc:
    ## gRPC exposed port
    ##
    port: {{[ .API.Config.Port ]}}

  {{[- if .API.Gateway ]}}

  ## Gateway attributes
  ##
  gateway:

    ## Gateway exposed port
    ##
    port: {{[ .API.Config.Gateway.Port ]}}
  {{[- end ]}}
  {{[- end ]}}

  ## Service information
  ##
  info:
    ## Pod exposed info/health port
    ##
    port: 8080

    ## Include a statistics in information details
    ##
    statistics: true

  {{[- if .Storage.Enabled ]}}

  ## Database attributes
  ##
  database:

    enabled: {{[ printf "%t" .Storage.Enabled ]}}

    tls:
      ## If true, TLS certs will be used for connection to database
      ##
      ## Should be false when Cloud SQL Proxy provides secure connection
      ##
      enabled: false

      ## Secret with TLS certificates (client's cert, key and server's CA)
      ##
      secret: {{[ .Name ]}}-db-certs

      ## Mount path of certs from the secret
      ##
      mountPath: /etc/ssl/{{[ .Storage.Config.Driver ]}}/

    ## Database driver (postgres, mysql, etc)
    ##
    driver: {{[ .Storage.Config.Driver ]}}

    ## Database name
    ##
    name: {{[ .Storage.Config.Name ]}}

    ## Database host name
    ##
    host: {{[ .Storage.Config.Host ]}}

    ## Database port number
    ##
    port: {{[ .Storage.Config.Port ]}}

    ## Database username secret
    ##
    username: {{[ .Storage.Config.Username ]}}

    ## Database password
    ##
    password: {{[ .Storage.Config.Password ]}}

    ## Connection properties like ssl-mode, sslkey and others
    ##
    ## sslmode should equal "disable" when we use Cloud SQL Proxy
    ## which provides secure connection to Cloud SQL
    properties:
      - sslmode=disable
      # - sslmode=verify-ca
      # - sslrootcert=/etc/ssl/{{[ .Storage.Config.Driver ]}}/server-ca.pem
      # - sslcert=/etc/ssl/{{[ .Storage.Config.Driver ]}}/client-cert.pem
      # - sslkey=/etc/ssl/{{[ .Storage.Config.Driver ]}}/client-key.pem

    ## Database connections
    ##
    connections:
      max: {{[ .Storage.Config.Connections.Max ]}}
      idle: {{[ .Storage.Config.Connections.Idle ]}}
  {{[- end ]}}

  ## Logger format and level
  ##
  logger:
    ## logging format (available formats: json, txt)
    format: json
    ## logging level (0 - debug, 1 - info, 2 - warning, etc)
    level: 2

    ## logging time
    time: false

livenessProbe:
  ## Liveness Probe
  ## If enabled k8s check http end-point /healthz for "Ok" status 200
  ##
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

readinessProbe:
  ## Rediness Probe
  ## If enabled k8s check http end-point /readyz for "Ok" status 200
  ##
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  failureThreshold: 3

## Resource requests and limits
## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 30m
    memory: 64Mi
  requests:
    cpu: 30m
    memory: 32Mi
